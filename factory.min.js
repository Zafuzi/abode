function clone(t){var e;if(null==t||"object"!=typeof t)return t;if(t instanceof Date)return e=new Date,e.setTime(t.getTime()),e;if(t instanceof Array){e=[];for(var o=0,n=t.length;o<n;o++)e[o]=clone(t[o]);return e}if(t instanceof Object){for(var a in e={},t)t.hasOwnProperty(a)&&(e[a]=clone(t[a]));return e}throw new Error("Unable to copy obj! Its type isn't supported.")}let Icons={credit:"images/tile.png",steel:"images/steel.png",oxygen:"images/oxygen.png",methane:"images/methane.png",rocket:"images/rocket.png",station:"images/station.png",power:"images/power.png",solar:"images/power.png",hydrogen:"images/tile.png",water:"images/water.png",carbon:"images/carbon.png",grass:"images/tile.png",iron:"images/iron.png",slag:"images/tile.png",trees:"images/trees.png",silicate:"images/tile.png",factory:"images/factory.png",tank:"images/tile.png",tile:"images/tile.png",splitter:"images/tile.png",combiner:"images/tile.png"},node_colors={any:"#fff",power:"#fff3a6",solar:"#fff3a6",oxygen:"#ffa6a6",hydrogen:"#fff",methane:"#a6fffe",water:"#a6caff",steel:"#999",grass:"#a6ffaf",carbon:"#58637a",slag:"#c9bbab",iron:"#ba7254",rocket:"#ff99e6",silicates:"#b6c9a5",trees:"#2E6230",carbon_dioxide:"#ffffff",food:"#ffffff"},add_factory=function(t,e,o,n){var a=ctx.transformedPoint(canvas.width/2-50,canvas.height/2-50);new Factory(t,e,Icons[t],o,n,a.x,a.y)},master_tick_rate=1e3,input_connectors={any:["input","any","Any","u"],power:["input","power","Power","kW"],water:["input","water","Water","L"]},output_connectors={any:["output","any","Any","u"],power:["output","power","Power","kW"],oxygen:["output","oxygen","Oxygen","L"],hydrogen:["output","hydrogen","Hydrogen","L"],water:["output","water","Water","L"]},add_input=function(t,e,o,n){return new Connector(input_connectors[t][0],input_connectors[t][1],input_connectors[t][2],input_connectors[t][3],e/master_tick_rate,o,n/master_tick_rate)},add_output=function(t,e,o,n){return new Connector(output_connectors[t][0],output_connectors[t][1],output_connectors[t][2],output_connectors[t][3],e/master_tick_rate,o,n/master_tick_rate)},connector_radius=10;class Connector{constructor(t="input",e="tile",o="Empty Connector",n="u",a=0,r=0,c=0){this.type=t,this.id=e,this.name=o,this.unit=n,this.production_rate=a,this.capacity=r,this.usage_rate=c,this.x=0,this.y=0,this.r=connector_radius}update(t=Factory,e=Number){let o=this;o.parent=t,o.x="input"==o.type?t.x:t.x+t.w,o.y=t.dy+(3*factory_padding+2*o.r*e),0==e&&(o.y+=2*o.r),t.resources[o.id]||(t.resources[o.id]={capacity:o.capacity,in_storage:0});let n=(Math.floor(t.resources[o.id].capacity)||0)+(o.unit||"u/s")+" | "+o.name;ctx.measureText(n).width+2*o.r>t.w&&(t.w+=(ctx.measureText(n).width+2*o.r+2*factory_padding)/2),t.dy+=3*factory_padding+2*o.r*e,t.h+=3*factory_padding+2*o.r,0==e&&(t.dy+=2*o.r,"output"==o.type&&(t.h+=2*o.r));let a=t.resources[o.id].in_storage,r=t.resources[o.id].capacity;if("output"==o.type){if(console.log(a,r),a+o.production_rate<=r){let e=!0;t.inputs.forEach(o=>{t.resources[o.id]&&t.resources[o.id].in_storage>=o.usage_rate||(e=!1)}),e&&(t.resources[o.id].in_storage+=o.production_rate)}}else if(o.connected){let e=o.connected.parent.resources[o.connected.id].in_storage;e-o.usage_rate>=0&&a+o.usage_rate<=r&&(o.connected.parent.resources[o.connected.id].in_storage-=o.usage_rate,t.resources[o.id].in_storage+=o.usage_rate)}}draw(t=Factory){let e=this;ctx.beginPath(),ctx.fillStyle=node_colors[e.id],ctx.arc(e.x,e.y,e.r,0,2*Math.PI),ctx.fill(),ctx.closePath();let o=(Math.floor(t.resources[e.id].in_storage)||0)+(e.unit||"u/s")+" | "+e.name;"input"==e.type?(ctx.beginPath(),ctx.fillText(o,e.x+2*e.r,e.y+e.r/2),ctx.closePath()):(ctx.beginPath(),ctx.fillText(o,e.x-ctx.measureText(o).width-2*e.r,e.y+e.r/2),ctx.closePath())}}let factories=[],factory_font_size=24,factory_icon_size=24,factory_padding=5,factory_font=factory_font_size+"px monospace";class Factory{constructor(t="empty",e="Empty and Useless",o=Icons.tile,n=[],a=[],r=0,c=0){this.type=t,this.name=e,this.inputs=n,this.outputs=a,this.resources=[],this.x=r,this.y=c;let i=new Image;i.src=o,this.icon=i,this.w=100;let s=ctx.measureText(self.name).actualBoundingBoxAscent;this.h=factory_icon_size+2*factory_padding-s/2,this.header_height=this.h,this.dy=this.y+this.header_height,factories.push(this)}update(){let t=this;t.connections=[];let e=ctx.measureText(t.name).actualBoundingBoxAscent;t.h=factory_icon_size+4*factory_padding-e/2,t.header_height=t.h,t.dy=t.y+t.header_height,t.inputs.forEach((e,o)=>{e.update(t,o)}),t.outputs.forEach((e,o)=>{e.update(t,o)}),this.calc_connections()}draw(){let t=this;ctx.beginPath(),ctx.fillStyle="#222233",ctx.fillRect(t.x,t.y,t.w,t.h),ctx.strokeStyle="#444",ctx.strokeRect(t.x,t.y,t.w,t.h),ctx.closePath(),ctx.fillStyle="#fff",ctx.font=factory_font;let e=ctx.measureText(t.name).actualBoundingBoxAscent;if(ctx.fillText(t.name,t.x+factory_icon_size+3*factory_padding,t.y+(factory_icon_size+2*factory_padding)-e/2),ctx.measureText(t.name).width+factory_font_size+factory_padding>=t.w&&(t.w=ctx.measureText(t.name).width+factory_font_size+4*factory_padding),ctx.beginPath(),ctx.drawImage(t.icon,0,0,t.icon.width,t.icon.height,t.x+factory_padding,t.y+factory_padding,factory_icon_size,factory_icon_size),ctx.closePath(),t.inputs.forEach(e=>{e.draw(t)}),t.outputs.forEach(e=>{e.draw(t)}),t.capacity){let e=t.y+t.h+factory_font_size;Object.keys(t.resources).forEach(o=>{let n=t.resources[o],a=o+" "+Math.floor(n.in_storage)+"/"+Math.floor(n.capacity);ctx.fillText(a,t.x+3*factory_padding,e),e+=factory_font_size})}}calc_connections(){let t=this;t.outputs.forEach(e=>{if(e.connected){let o=e.connected;if(o.remove_on_mouse_up&&!mousedown)return e.connected=null,void factories.forEach(t=>{t.inputs.forEach(t=>{(t.id==e.id||t.any)&&hit_rad(t)&&(t.connected&&t.connected.connected==t&&(t.connected.connected=null,e.connected=null,t.connected=null),e.connected=t,t.connected=e)})});let n={},a=e.x>o.x?o:e;n.remote_node=o;let r=(e.x+o.x)/2;if(e==a){let t={x:r,y:e.y},a={x:r,y:o.y};n.x=e.x,n.y=e.y,n.cp1=t,n.cp2=a,n.px=o.x,n.py=o.y}else{let t={x:r,y:o.y},a={x:r,y:e.y};n.x=e.x,n.y=e.y,n.cp1=t,n.cp2=a,n.px=o.x,n.py=o.y}n.strokeStyle=node_colors[e.id],t.connections.push(n)}})}}let FactoryTypes={solar:function(){add_factory("solar","Solar Panels",[],[add_output("power",20,20,0)])},wind_power:function(){add_factory("wind","Wind Power",[],[add_output("power",5,50,0)])},combiner:function(){add_factory("combiner","Single Combiner",[add_input("any"),add_input("any")],[add_output("any")])},splitter:function(){add_factory("splitter","Single Splitter",[add_input("any")],[add_output("any"),add_output("any")])},storage:function(){add_factory("storage","Storage",[add_input("any",0,1e3,0)],[add_output("any",0,1e3,0)])},water:function(){add_factory("water","Water Pump",[add_input("power",0,100,10)],[add_output("water",100,100,0)])},oxygen:function(){add_factory("oxygen","Electrolysis Chamber",[add_input("power",0,100,10),add_input("water",0,100,50)],[add_output("oxygen",10,100,0),add_output("hydrogen",10,100,0)])}};